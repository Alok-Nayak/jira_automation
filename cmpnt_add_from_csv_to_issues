import requests
from requests.auth import HTTPBasicAuth
import json
import io
import csv

# auth = HTTPBasicAuth("email@example.com", "<api_token>")
jira_url= "http://jira.alok.com:8080"
project_id="AN"
#from csv
issuId_column_name="issueId"
component_column_name="name"
component_description="my jira component "


url = jira_url+"/rest/api/2/project/"+project_id+"/components"
headers = {"Accept": "application/json", "Content-Type":"application/json", 'Authorization': 'Bearer Nzk1ODYwMjYyOTE0OpRBaIxxxxxxxxxxx'}
response = requests.get(url, headers=headers)
a=response.json()

project_comp_lst  =[]
for i in a:
    val = i['name']
    project_comp_lst.append(val)
#read csv file for component list and issue id
csv_comp_lst=[]
csv_issue_lst=[]
with open('tr_local.csv', newline='') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        issueId_csv = row[issuId_column_name] 
        component_csv = row[component_column_name]
        csv_comp_lst.append(component_csv)
        csv_issue_lst.append(issueId_csv)
#comparing project component with csv list component
component_add_lst = list(set(csv_comp_lst).difference(project_comp_lst))
# Add list components in project, if components not in project
url = jira_url+"/rest/api/2/component"
headers = {"Accept": "application/json", "Content-Type":"application/json", 'Authorization': 'Bearer Nzk1ODYwMjYyOTE0OpRBaIxxxxxxxxxxx'}
for i in component_add_lst:
    if i not in project_comp_lst:
        compnt_add=i
        payload = json.dumps( {
            "isAssigneeTypeValid": False,
            "name": compnt_add,
            "description": component_description,
            "project": project_id
        } )
        response = requests.post(url, headers=headers, data=payload)   
# list issue in prroject
url= jira_url+"/rest/api/2/search?jql=project="+project_id+"&maxResults=10000"
headers = {"Accept": "application/json", "Content-Type":"application/json", 'Authorization': 'Bearer Nzk1ODYwMjYyOTE0OpRBaIxxxxxxxxxxx'}
response = requests.get(url, headers=headers, data=payload)
b=response.json()
for i in b['issues']:
    issue_id=(i['key'])
# get component from each issu
    url = jira_url+"/rest/api/2/issue/"+issue_id
    headers = {"Accept": "application/json", "Content-Type":"application/json", 'Authorization': 'Bearer Nzk1ODYwMjYyOTE0OpRBaIxxxxxxxxxxx'}
    response = requests.get(url, headers=headers, data=payload)
    ic=response.json()
    data = ic['fields']['components']
    for i in data:
        issue_component=(i['name'])
        issue_id = issue_id
        issue_component=issue_component
        # Removeing existing components from issue
        url = jira_url+"/rest/api/2/issue/"+issue_id
        payload=json.dumps({
            "update": {
                "components": [
                    {
                         "remove": {
                            "name": issue_component
                        }
                    }
                ]
            }
        })

        headers = {"Accept": "application/json", "Content-Type":"application/json", 'Authorization': 'Bearer Nzk1ODYwMjYyOTE0OpRBaIxxxxxxxxxxx'}
        response = requests.put(url, headers=headers, data=payload)
# update latest compoent from csv
count=0
for issue in csv_issue_lst:
    component_name = csv_comp_lst[count]
#     print(component_name)
    url = jira_url+"/rest/api/2/issue/"+issue
    payload=json.dumps({
        "update": {
             "components": [
                 {
                      "add": {
                         "name": str(component_name)
                     }
                 }
             ]
         }
        })

    headers = {"Accept": "application/json", "Content-Type":"application/json", 'Authorization': 'Bearer Nzk1ODYwMjYyOTE0OpRBaIxxxxxxxxxxx'}
    response = requests.put(url, headers=headers, data=payload)
    count += 1
    print(response)
#     a=response.json()
#     print(a)

